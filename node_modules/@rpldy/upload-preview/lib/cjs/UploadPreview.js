"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUploadPreviewForBatchItemsMethod = exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _sharedUi = require("@rpldy/shared-ui");
var _usePreviewsLoader = require("./usePreviewsLoader");
var _utils = require("./utils");
var _consts = require("./consts");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const showBasicPreview = (type, url, previewProps, onImgError) => type === _consts.PREVIEW_TYPES.VIDEO ? /*#__PURE__*/_react.default.createElement("video", _extends({
  key: url,
  src: url,
  controls: true
}, previewProps)) : /*#__PURE__*/_react.default.createElement("img", _extends({
  key: url,
  onError: onImgError,
  src: url
}, previewProps));
const usePreviewMethods = (previews, clearPreviews, previewMethodsRef, onPreviewsChanged, removeItemFromPreview) => {
  (0, _react.useImperativeHandle)(previewMethodsRef, () => ({
    clear: clearPreviews,
    removePreview: removeItemFromPreview
  }), [clearPreviews, removeItemFromPreview]);
  (0, _react.useEffect)(() => {
    if (onPreviewsChanged) {
      onPreviewsChanged(previews);
    }
  }, [previews, onPreviewsChanged]);
};
const getUploadPreviewForBatchItemsMethod = (method = _sharedUi.useBatchStartListener) => {
  const usePreviewsLoader = (0, _usePreviewsLoader.getPreviewsLoaderHook)(method);
  return props => {
    const {
      PreviewComponent,
      previewMethodsRef,
      onPreviewsChanged,
      ...previewOptions
    } = props;
    const {
      previews,
      clearPreviews,
      removeItemFromPreview
    } = usePreviewsLoader(previewOptions);
    const onImagePreviewLoadError = (0, _react.useCallback)(e => {
      const img = e.currentTarget;
      const fallback = (0, _utils.getFallbackUrlData)(props.fallbackUrl, img.src);
      if (fallback) {
        img.src = fallback.url;
      }
    }, [props.fallbackUrl]);
    usePreviewMethods(previews, clearPreviews, previewMethodsRef, onPreviewsChanged, removeItemFromPreview);
    return previews.map(data => {
      const {
        id,
        url,
        type,
        name,
        isFallback,
        removePreview,
        props: previewProps
      } = data;
      return PreviewComponent ? /*#__PURE__*/_react.default.createElement(PreviewComponent, _extends({
        key: id + url,
        id: id,
        url: url,
        type: type,
        name: name,
        isFallback: isFallback,
        removePreview: removePreview
      }, previewProps)) : showBasicPreview(type, url, previewProps, onImagePreviewLoadError);
    });
  };
};
exports.getUploadPreviewForBatchItemsMethod = getUploadPreviewForBatchItemsMethod;
const UploadPreview = getUploadPreviewForBatchItemsMethod();
var _default = exports.default = UploadPreview;