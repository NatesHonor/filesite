function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import React, { useCallback, useEffect, useImperativeHandle } from "react";
import { useBatchStartListener } from "@rpldy/shared-ui";
import { getPreviewsLoaderHook } from "./usePreviewsLoader";
import { getFallbackUrlData } from "./utils";
import { PREVIEW_TYPES } from "./consts";
const showBasicPreview = (type, url, previewProps, onImgError) => type === PREVIEW_TYPES.VIDEO ? /*#__PURE__*/React.createElement("video", _extends({
  key: url,
  src: url,
  controls: true
}, previewProps)) : /*#__PURE__*/React.createElement("img", _extends({
  key: url,
  onError: onImgError,
  src: url
}, previewProps));
const usePreviewMethods = (previews, clearPreviews, previewMethodsRef, onPreviewsChanged, removeItemFromPreview) => {
  useImperativeHandle(previewMethodsRef, () => ({
    clear: clearPreviews,
    removePreview: removeItemFromPreview
  }), [clearPreviews, removeItemFromPreview]);
  useEffect(() => {
    if (onPreviewsChanged) {
      onPreviewsChanged(previews);
    }
  }, [previews, onPreviewsChanged]);
};
const getUploadPreviewForBatchItemsMethod = (method = useBatchStartListener) => {
  const usePreviewsLoader = getPreviewsLoaderHook(method);
  return props => {
    const {
      PreviewComponent,
      previewMethodsRef,
      onPreviewsChanged,
      ...previewOptions
    } = props;
    const {
      previews,
      clearPreviews,
      removeItemFromPreview
    } = usePreviewsLoader(previewOptions);
    const onImagePreviewLoadError = useCallback(e => {
      const img = e.currentTarget;
      const fallback = getFallbackUrlData(props.fallbackUrl, img.src);
      if (fallback) {
        img.src = fallback.url;
      }
    }, [props.fallbackUrl]);
    usePreviewMethods(previews, clearPreviews, previewMethodsRef, onPreviewsChanged, removeItemFromPreview);
    return previews.map(data => {
      const {
        id,
        url,
        type,
        name,
        isFallback,
        removePreview,
        props: previewProps
      } = data;
      return PreviewComponent ? /*#__PURE__*/React.createElement(PreviewComponent, _extends({
        key: id + url,
        id: id,
        url: url,
        type: type,
        name: name,
        isFallback: isFallback,
        removePreview: removePreview
      }, previewProps)) : showBasicPreview(type, url, previewProps, onImagePreviewLoadError);
    });
  };
};
const UploadPreview = getUploadPreviewForBatchItemsMethod();
export { getUploadPreviewForBatchItemsMethod };
export default UploadPreview;